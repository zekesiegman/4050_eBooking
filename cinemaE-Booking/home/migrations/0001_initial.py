# Generated by Django 4.0.3 on 2022-04-14 19:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('accountID', models.AutoField(primary_key=True, serialize=False)),
                ('cardNo', models.CharField(max_length=250)),
                ('expirationDate', models.DateField()),
                ('billingAdd', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='CardType',
            fields=[
                ('cardTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('title', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('director', models.CharField(max_length=100)),
                ('producer', models.CharField(max_length=100)),
                ('synopsis', models.CharField(max_length=500)),
                ('rating', models.CharField(max_length=5)),
                ('playing_now', models.BooleanField(default=False)),
                ('trailer_picture', models.URLField(blank=True, max_length=300)),
                ('trailer_video', models.URLField(blank=True, max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='MovieCategory',
            fields=[
                ('category', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('promoID', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.IntegerField()),
                ('valid_thru', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Showtime',
            fields=[
                ('time', models.CharField(default='12/12/12 12:12', max_length=50, primary_key=True, serialize=False)),
                ('movieID', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='home.movie')),
            ],
        ),
        migrations.AddField(
            model_name='movie',
            name='cat',
            field=models.ForeignKey(default='Action', on_delete=django.db.models.deletion.CASCADE, to='home.moviecategory'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=150)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('cardNo', models.CharField(max_length=250)),
                ('expirationDate', models.DateField()),
                ('billingAdd', models.CharField(max_length=150)),
                ('phone', models.CharField(max_length=10)),
                ('enrollForPromotions', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
